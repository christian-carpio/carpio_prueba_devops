name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean install

      - name: Upload built JAR
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.event_name.repository.name }}-${{ github.sha }}
          path: target/*.jar

  test:
    name: Unit Tests & Code Coverage
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Jacoco code coverage
        run: mvn jacoco:prepare-agent test jacoco:report

      - name: Upload Jacoco report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report-${{ github.sha }}
          path: target/site/jacoco

  analyze:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run SpotBugs
        run: mvn com.github.spotbugs:spotbugs-maven-plugin:4.7.3.0:check

  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, analyze]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        run: |
          docker build \ 
          -t ${{ secrets.DOCKER_USERNAME }}/devsu-demo-devops-java:${{ github.sha }} \
          -t ${{ secrets.DOCKER_USERNAME }}/devsu-demo-devops-java:latest \
          .
      - name: Push Docker image (with SHA)
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/devsu-demo-devops-java:${{ github.sha }}

      - name: Push Docker image (latest)
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/devsu-demo-devops-java:latest

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build-push

    steps:
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.48.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.48.0_Linux-64bit.deb

      - name: Scan Docker image with Trivy
        run: |
          trivy image ${{ secrets.DOCKER_USERNAME }}/devsu-demo-devops-java:latest
